name: On PR Build Push Vet

on:
  pull_request:
    branches:
      - main

# FYI...
#  Raw Branch Name: ${{ github.head_ref }}
#  <commit-sha>: ${{ github.event.pull_request.head.sha }}

# Produced images...
#  1. (Always) Unvetted Image: <owner/repository>_<normalized-branch>_unvetted:<commit-sha>
#  2. (Always) Dev Environment Image: <owner/repository>_<normalized-branch>_dev:<commit-sha>
#  3. (If vetted) Vetted_image: <owner/repository>_<normalized-branch>:<commit-sha>

jobs:
  # Normalize the branch for image name
  pr-norm-branch:
    uses: brianjbayer/actions-image-cicd/.github/workflows/normalize_for_image_name.yml@main
    with:
      raw_name: ${{ github.head_ref }}

  # Build and Push Images
  build-and-push-branch-devenv:
    needs: [pr-norm-branch]
    uses: brianjbayer/actions-image-cicd/.github/workflows/build_push_image.yml@main
    with:
      image: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
      buildopts: --target devenv
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  build-and-push-branch-unvetted:
    needs: [pr-norm-branch]
    uses: brianjbayer/actions-image-cicd/.github/workflows/build_push_image.yml@main
    with:
      image: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_unvetted:${{ github.event.pull_request.head.sha }}
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  # Vet Deploy Image
  vet-code-standards:
    needs: [pr-norm-branch, build-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun rubocop on development environment
        run: "E2ETESTS_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run lint"

  vet-dependency-security:
    needs: [pr-norm-branch, build-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun bundle-audit on development environment
        run: "E2ETESTS_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run secscan"

  vet-deploy-e2e-tests:
    needs: [pr-norm-branch, build-and-push-branch-unvetted]
    runs-on: ubuntu-latest
    env:
      UNVETTED_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_unvetted:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun unvetted image with mock target
        run: "E2ETESTS_IMAGE=${UNVETTED_IMAGE} ./script/dockercomposerun -cm"

# Push (IF) Vetted Deploy Image
  push-branch-vetted-deploy-image:
    needs:
      - vet-code-standards
      - vet-dependency-security
      - pr-norm-branch
    uses: brianjbayer/actions-image-cicd/.github/workflows/pull_push_image.yml@main
    with:
      # Pull unvetted branch image
      pull_as: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_unvetted:${{ github.event.pull_request.head.sha }}
      # Push Vetted Image
      push_as: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}:${{ github.event.pull_request.head.sha }}
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  # Vet Dev Environment Image
  vet-devenv-e2e-tests:
    needs: [pr-norm-branch, build-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun devenv image with mock target
        run: "E2ETESTS_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -dm ./script/run tests"
